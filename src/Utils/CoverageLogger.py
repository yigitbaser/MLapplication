"""
Logger
"""

import re
import sys
from datetime import datetime

import git
from pandas import DataFrame

STR_TO_FIND = "<tr class=\"total\">"
NUMBER_OF_CHARS = 350
TRACE_END_TAG = "</tr>"
COV_FILE_LOCATION = "C:/MLTemplate/coverage/index.html"
LOG_FILE_LOCATION = "C:/MLTemplate/reports/Coverage_Log.csv"


def get_time() -> str:
    """
    It returns the current time.
    :return: str. Current time(hh:mm:ss).
    """
    now = datetime.now()
    return now.strftime("%H:%M:%S")


def get_repository() -> str:
    """
    It returns the current branch.
    :return: str. Current repository.
    """
    repository = git.Repo(search_parent_directories=True)
    branch = repository.active_branch
    return str(branch.name)


def extract_total_coverage_rate(coverage_html_file_loc: str, str_to_find: str = STR_TO_FIND,
                                trace_end_tag: str = TRACE_END_TAG,
                                number_of_chars: int = NUMBER_OF_CHARS) -> str:
    """
    It extracts and returns the total coverage rate from html file generated by pytest-cov by
    extracting the part of html file using related tags and then using regular expression.
    :param coverage_html_file_loc: str. Directory of html file that includes total coverage rate.
    :param str_to_find: str. It is the html tag that is related with the total
    coverage line.
    :param trace_end_tag: str. It is the end tag to search to extract the part of html related to
    the total coverage.
    :param number_of_chars: int. Number of characters to extract between two html tags when
    pytest-cov is used.
    :return: str. Total coverage rate.
    """
    html_file = open(coverage_html_file_loc, "r", encoding="utf-8")
    html_content = html_file.read()
    index_string = html_content.find(str_to_find)  # finds the part where total coverage is written
    extracted_html_part = html_content[index_string:index_string + number_of_chars]
    index_trace_end_tag = extracted_html_part.find(trace_end_tag)
    raw_coverage = extracted_html_part[index_trace_end_tag - 27:index_trace_end_tag]
    clean_coverage = re.search(">(.+?)%", raw_coverage)  # finds coverage rate by using re
    if clean_coverage is not None:
        cover_ratio = str(clean_coverage[1])  # Transforms from re.match object to string
    else:
        cover_ratio = "0"
    return cover_ratio


def save_to_file(branch: str, time: str, coverage_ratio: str, comment: str, path: str) -> None:
    """
    It saves the total coverage ratio, branch name, time and comment typed through command line
    into into the log file.
    :param branch: str. Branch name.
    :param time: str. Current time.
    :param coverage_ratio: str. Total coverage rate of test files.
    :param comment: str. Comments.
    :param path: str. Directory that the log file exists.
    """
    df = DataFrame({"Branch_Name": [branch],
                    "Time": [time],
                    "Coverage_ratio": [coverage_ratio],
                    "Comment": [comment]})

    df.to_csv(path, index=False, mode="a", sep=";", header=False)


if __name__ == "__main__":
    CURRENT_TIME = get_time()
    CURRENT_BRANCH = get_repository()
    COVERAGE_RATE = extract_total_coverage_rate(COV_FILE_LOCATION)

    if len(sys.argv) > 1:  # if here is an argument written in cmd then take it
        CMD_COMMENT = str(sys.argv[1])
    else:
        CMD_COMMENT = ""

    save_to_file(CURRENT_BRANCH, CURRENT_TIME, COVERAGE_RATE, CMD_COMMENT, LOG_FILE_LOCATION)
